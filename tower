#include <iostream>
#include <cstdio>
#include <string>
//#include <Windows.h>
#include <algorithm>

using namespace std;

struct tower {
	char first;
	char last;
	int blocks;
};

bool towerCompare(tower lhs, tower rhs) { return lhs.first < rhs.first; }

int calcMax(tower * towers, bool **macierz, int *maxt, int sum, int place, int last)
{
	for (int i = 0; i < place; i++)
	{
		if (macierz[last][i])
		{
			macierz[last][i] = 0;
			sum += (towers[i]).blocks;
			calcMax(towers, macierz, maxt, sum, place, i);
			sum -= (towers[i]).blocks;
			macierz[last][i] = 1;
		}
		else if(i==place-1)
		{
			if (*maxt < sum)*maxt = sum;
			return *maxt;
		}
	}

}

//debug
//////////////////////////////////////////////////////////////////////////

void showTab(bool**tab, int sizet)
{
	for (int i = 0; i < sizet; i++)
	{
		for (int j = 0; j < sizet; j++)
		{
			cout << tab[i][j] << " ";
		}
		cout << endl;
	}
}

void showTowers(tower*towers, int place)
{
	for (int i = 0; i < place; i++)
	{
		cout << i << " " << (towers[i]).first << " " << (towers[i]).last << " " << (towers[i]).blocks << endl;
	}
}

/*cout << (towers[0]).first << (towers[0]).last << (towers[0]).blocks << endl;
cout << (towers[1]).first << (towers[1]).last << (towers[1]).blocks << endl;*/
//system("pause");

////////////////////////////////////////////////////////////////////////

int main()
{
	int ile, maxt = 2, place = 0;
	cin >> ile;
	tower *towers = new tower[ile];
	string word;
	bool pf = false;
	for(int i = 0;i<ile;i++)
	{
		cin >> word;
		pf = false;
		int a = word.size();
		a -= 1;
		for (int j = 0; j < a; j++)
		{
			if (word[j] > word[j + 1])
			{
				pf = true;
				break;
			}
		}
		if (pf)continue;
		(towers[place]).first = word[0];
		(towers[place]).last = word[a];
		(towers[place]).blocks = a+1;
		place++;
	}
	sort(towers,towers+place,towerCompare);
	
	bool**macierz = new bool*[place];
	for (int i = 0; i < place; i++)
		macierz[i] = new bool[place];
	bool ogol = true;
	for (int i = 0; i < place; i++)
	{
		for (int j = 0; j < place; j++)
		{
			if (i == j)
			{
				macierz[i][j] = 0;
				continue;
			}
			if ((towers[i]).last <= (towers[j]).first)
			{
				macierz[i][j] = 1;
				ogol = false;
			}
			else
				macierz[i][j] = 0;
		}
	}
	/*showTowers(towers, place);
	cout << endl;
	showTab(macierz, place);*/
	if (ogol)
	{
		int maxt = 0;
		for (int i = 0; i < place; i++)
		{
			if (maxt < (towers[i]).blocks)
				maxt = (towers[i]).blocks;
		}
		cout << maxt;
	}
	else
	{
		int maxt = 0;
		int sum;
		for (int i = 0; i < place; i++)
		{
		sum = (towers[i]).blocks;
		sum = calcMax(towers, macierz, &maxt, sum, place, i);
		if (maxt < sum)maxt = sum;
		}
		cout << maxt;
	}
	delete macierz;
	delete towers;
	return 0;
}
